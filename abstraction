# code on abstraction to hide complex details

class AbstractShape(ABC):
    @abstractmethod
    def area(self):
        pass
    
    @abstractmethod
    def perimeter(self):
        pass

class Rectangle(AbstractShape):
    def __init__(self, length, width):
        self.length = length
        self.width = width
    
    def area(self):
        return self.length * self.width
    
    def perimeter(self):
        return 2 * (self.length + self.width)

class Circle(AbstractShape):
    def __init__(self, radius):
        self.radius = radius
    
    def area(self):
        return 3.14159 * self.radius * self.radius
    
    def perimeter(self):
        return 2 * 3.14159 * self.radius

# Client code
shapes = [Rectangle(10, 20), Circle(5)]

for shape in shapes:
    print(f"The area is: {shape.area()}")
    print(f"The perimeter is: {shape.perimeter()}")
